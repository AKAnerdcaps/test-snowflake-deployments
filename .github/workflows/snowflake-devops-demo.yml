name: snowflake-devops-pipeline

on:
  push:
    branches:
      - dev
      - qa
      - master
    paths:
      - 'migrations/**'

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set deployment environment variables
        id: set-env
        run: |
          echo "Branch is $GITHUB_REF"

          if [[ "$GITHUB_REF" == "refs/heads/dev" ]]; then
            echo "env_name=DEV" >> $GITHUB_OUTPUT
            echo "db_name=${{ secrets.SF_DEV_DATABASE }}" >> $GITHUB_OUTPUT
            echo "role=${{ secrets.SF_ROLE }}" >> $GITHUB_OUTPUT
            echo "warehouse=${{ secrets.SF_WAREHOUSE }}" >> $GITHUB_OUTPUT

          elif [[ "$GITHUB_REF" == "refs/heads/qa" ]]; then
            echo "env_name=QA" >> $GITHUB_OUTPUT
            echo "db_name=${{ secrets.SF_QA_DATABASE }}" >> $GITHUB_OUTPUT
            echo "role=${{ secrets.SF_ROLE }}" >> $GITHUB_OUTPUT
            echo "warehouse=${{ secrets.SF_WAREHOUSE }}" >> $GITHUB_OUTPUT

          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "env_name=PROD" >> $GITHUB_OUTPUT
            echo "db_name=${{ secrets.SF_PROD_DATABASE }}" >> $GITHUB_OUTPUT
            echo "role=${{ secrets.SF_ROLE }}" >> $GITHUB_OUTPUT
            echo "warehouse=${{ secrets.SF_WAREHOUSE }}" >> $GITHUB_OUTPUT
          fi

      - name: Install schemachange
        run: pip install schemachange

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "Deploying to ${{ steps.set-env.outputs.env_name }} environment"
          schemachange \
            -f ./migrations \
            -a $SF_ACCOUNT \
            -u $SF_USERNAME \
            -r "${{ steps.set-env.outputs.role }}" \
            -w "${{ steps.set-env.outputs.warehouse }}" \
            -d "${{ steps.set-env.outputs.db_name }}" \
            -c "${{ steps.set-env.outputs.db_name }}.SCHEMACHANGE.CHANGE_HISTORY" \
            --create-change-history-table
